=========================
一.栈
1.后进先出
2.	满栈  SP指针指向最后入栈的地址
	空栈  SP指针指向将要放入数据的空地值
ARM 	采用满栈
        升栈  入栈时，SP指针从低地址到高地址 
	降栈                  高地址到低地址
ARM     采用降栈
栈帧  进程里面每一个函数占有一部分栈，称为栈帧
栈帧边界  FP R11 这个函数的上边界
          PC  
	  LR 
  	  FP  上一级函数的fp
	  SP  上一级函数的sp
	  SP R13  这个函数的下边界  
3.栈的作用
保存局部变量   
参数传递  参数大于4个，剩下的保存到栈，1-4个保存在通用寄存器 r0-r3
保存寄存器的值 当函数里面的函数又有参数传递，就把上一级r0-r3里面的值保存到栈

4.函数调用流程
1.首先保存上一级函数的FP，LR   push（fp，lr）
2.确定这个函数的 FP和SP指向哪里，也就是自己的栈帧
3.调用完，ldr pc，=lr  返回函数调用那个语句
========================================
二.初始化bss段 
1.预先把bss段里面的所有值赋0
如果不初始化，bss段里面的值是错乱的
==================================
三.g-boot第二阶段，开始C语言
1.绝对跳转到gboot_main()
==================================
四.C语言汇编混合编译
1.汇编调用C
ldr pc, gboot_main
2.C调用汇编
.global light_led
light_led();
3.C内嵌汇编 
__asm__volatile(
"代码部分"
:输出部分  "=r"(value)
:输入部分  "r" (value)
:破坏部分  "memory"
);





















